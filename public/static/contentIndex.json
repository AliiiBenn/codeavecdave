{"gestion_temps":{"title":"Comment gérer son temps en informatique","links":["L'importance-des-blocs-de-travail-en-informatique","Le-Deep-Work","Deep-Work---Cal-Newport","Les-sessions-de-travail-profond-en-informatique","Comment-devenir-un-développeur-organisé","La-loi-de-parkinson","La-loi-de-pareto"],"tags":[],"content":"Les développeurs sont mal organisés §\nLes développeurs sont très souvent des catastrophes au niveau de l’organisation, ils ne savent pas quelle va être leur prochaine tâche, quelle est la date limite pour un projet, etc. Il y a ce cliché dans les entreprises américaines du développeur qui commence sa journée à 9h, qui travaille pendant 1h, a une réunion pendant une 1h30, mange pendant 2h, retourne dans une réunion pendant 2h puis travaille à nouveau pendant 1h. Au final, à la fin de la journée il a travaillé réellement pendant 2h ce qui est une honte en terme d’organisation et d’efficacité.\nBien que ce type de développeurs se trouvent souvent dans de grandes entreprises, cela ne fait pas d’eux des développeurs organisés et efficaces. Ces mêmes développeurs qui optimisent et organisent chaque seconde de leur vie sont ceux que l’on voit à 21 ans à la tête de grandes entreprises valant des milliards de dollars. Un petit changement de valeur pour un changement complet de vie.\nL’importance des blocs de travail en informatique §\nLa création de blocs de travail est un élément essentiel dans le gestion du temps en informatique pour un gain maximal de productivité. Le problème qui en soi n’est pas réellement un problème est que la majorité des personnes codent par passion, cela veut donc dire qu’ils codent dès que l’envie leur prends.\nMême si cela ne pose pas de problèmes d’être passionné par ce domaine, il faut aussi comprendre qui l’on souhaite en faire notre métier il est essentiel de se professionnaliser quant à sa façon de travailler, nous devons avoir un minimum de discipline.\nDe plus lorsque l’on code tout au long de la journée sans pour autant se concentrer pendant plusieurs heures nous allons avoir un gros manque d’efficacité. L’informatique est un domaine complexe qui nécessite souvent de réfléchir pendant plusieurs heures alors si l’on code pendant uniquement quelques dizaines de minutes tout au long de la journée, on ne jamais réellement se poser pour développer un problème et donc le résoudre.\nCe que j’entend réellement par la mise en place de blocs de travail est de définir sur une feuille, dans son agenda où peu importante, une bloc de deux heures par exemple dans lequel nous allons uniquement coder et rien d’autre, deux heures à rester sur notre éditeur de code. Ce bloc peut bien sûr être plus long sans pour autant devenir l’entièreté de la journée mais il peut aussi être plus court tant que l’on n’abuse pas. L’essentiel est de savoir être sérieux dans la durée de ces blocs. Il est aussi possible de définir plusieurs de ces blocs dans la journée.\nLes sessions de travail profond en informatique §\nOn sait que pour une meilleure gestion du temps et une meilleure productivité, les développeurs doivent créer des blocs de travail mais cela n’est pas tout, ces blocs de travail ne doivent uniquement être des sessions vides de concentration dans lesquels on va sur son téléphone toutes les dix minutes, où on va regarder sur discord si on nous répondu ou si on a une nouvelle notification, etc.\nCes sessions de travail doivent être ce que l’on appelle des sessions de travail en profondeur aussi appelées sessions de Deep Work. Ce concept a été introduit et est surtout devenu populaire à l’aide du livre Deep Work - Cal Newport. Dans ce livre il nous explique l’importance du Deep Work, cela consiste en des séances de travail dans lesquels nous devons être le plus concentré possible et donc avoir le moins de distractions possible.\nAlors, dans le cas de l’informatique, une séance de travail en profondeur de la plus grande qualité doit se faire uniquement avec son éditeur de code et les documentation nécessaires ouverts. Cela va réduire au maximum la friction et favoriser au maximum la concentration. Dans ces séance, le téléphone doit être banni car c’est un véritable destructeur de concentration. Comme dit dans le livre, chaque notification est en moyenne quinze minutes de travail de perdu, cela peut semble insensé mais est en réalité logique quand on pense au temps nécessaire pour revenir dans un état de concentration élevé.\nCes sessions de travail en profondeur vont donc augmenter au maximum notre concentration, cela va donc augmenter considérablement l’efficacité que l’on va avoir sur nos tâches. Dans mon cas personnel, cela me permet, après deux ans de pratique, de faire en quatre heures ce que la majorité des personnes avec autant d’experience que moi font en une semaine.\nComment organiser ses sessions de travail en profondeur en informatique §\nCes sessions de travail en profondeur doivent être un minimum organisé, alors pour devenir un développeur organisé il ne faut pas uniquement commencer ces séances dès que l’on a quelques minutes de libre mais il faut prendre au minimum un bloc d’une heure de sa journée jusqu’à deux heures si cela est possible où on fait uniquement cela.\nLe plus efficace est de regarder la veille quels sont les moments du lendemain où il sera possible de rester une heure minimum sans distractions et d’y placer un bloc de travail en profondeur.\nL’importance des pauses en informatique §\nUne grande quantité de développeurs le sont par passion. Lorsque l’on a une passion on voit rarement le temps passer et on se retrouve rapidement à être en train de coder pendant dix heures sans même s’en rendre compte.\nLe problème n’est pas dans le fait que cela soit une passion mais dans le fait que la plupart du temps on prends trop peu de pauses, négligeant leur importance. Bien que l’on aime coder pendant des heures, le cerveau a parfois besoin de repos pour reprendre en énergie.\nSi l’on code pendant trop longtemps le cerveau va produire du travail qui sera toujours un peu moins efficace jusqu’à arriver à un état critique où cela devient contre-productif de continuer à travailler.\nAlors, un développeur qui souhaite être encore meilleur se doit de prendre au moins cinq minutes de pause par heure pour oxygéner son cerveau et marcher un minimum. En plus de faire un bien fou au cerveau, cela permet de ne pas se détruire les jambes et surtout les genoux.\nPendant ces pauses, il ne faut absolument pas toucher à son téléphone, bien que l’on pense que c’est un moyen de se calmer, cela va encore plus stimuler le cerveau à cause d’un pic de dopamine ce qui va encore plus empirer la situation.\nLa loi de parkinson en informatique §\nPour exploser sa productivité en tant que développeur, La loi de parkinson est un élément clé. Cette loi stipule que plus une personne dispose de temps pour accomplir une tâche, plus celle-ci nécessitera de temps.\nCela veut donc dire qu’une fonctionnalité qui peut être terminée en deux jours à laquelle on donne une date limite de une semaine prendra alors une semaine à être terminée. Cela est encore pire quand on défini pas de date limite pour une fonctionnalité car on peut dilater son temps indéfiniment.\nAlors pour appliquer La loi de parkinson dans ses projets informatique, il faut définir une date limite pour la fin du projet et surtout une date limite pour chacune des fonctionnalités. Cette date ne doit pas être trop large ni trop faible, elle doit être assez longue pour effectuer correctement la tâche mais assez courte pour nous donner une petite pression constante lorsque l’on code de bien la finir à temps.\nLa loi de pareto en informatique §\nLa loi de pareto est absolument essentielle lors de l’organisation d’un projet informatique pour garder la productivité au plus haut constamment. Cette loi nous dit que 20% des tâches constituent 80% des résultats et que 80% des tâches constituent 20% des résultats.\nEn informatique, les 20% représentent les tâches prioritaires et souvent complexes qui vont nous permettre de créer un projet entièrement fonctionnel soit 80% du travail. Les 80% restant sont toutes les tâches secondaires généralement beaucoup plus simples qui vont rendre le projet plus beau, etc.\nCes deux types de tâche ont leur grande importance, le problème est que la majorité des développeurs font quelques tâches prioritaires au début d’un projet puis finissent par passer tout leur temps à coder des fonctionnalités secondaires. Cela va donc créer un projet non fonctionnel et donc qui est inutile.\nPour résoudre ce problème, on peut voir la situation d’un autre point de vue. Si on s’imagine une voiture, que l’on prends un moteur, quatre roues et un volant chaque pièce est fonctionnelle de son côté mais on ne peut rien faire ensemble. Alors le client ne sera jamais satisfait. La raison à cela est que l’on a pris trop de temps à essayer de créer quelque chose de trop complexe en trop peu de temps. Maintenant, si l’on comprends que l’essentiel est simplement fournir quelque chose de fonctionnel alors on va créer par exemple un skate puis un trotinnette, puis un vélo, etc. jusqu’à arriver à notr voiture."},"habitudes":{"title":"Comment développer de meilleures habitudes en informatique","links":[],"tags":[],"content":"Pourquoi développer de meilleures habitudes en informatique §\nDévelopper de bonnes habitudes est forcément une bonne chose dans tous les domaines de la vie mais pourquoi spécifiquement dans l’informatique ?\nSi tu cherches à réellement devenir un grand développeur tu ne vas pas devoir suivre les conseils de tous les développeurs mais uniquement des grands développeurs. Quand on écoute les grands développeurs tel que le créateur de C++ ou Linus Torvald, créateur du noyau Linux ont tous des façon différentes de voir les choses comparé aux développeurs lambda.\nIls sont constamment en apprentissage, ils ont des grandes techniques de travail. Par exemple Donald Knuth, un des plus grands développeurs encore vivant ne jure que par le travail en profondeur parce qu’il est conscient que les bonnes habitudes de travail sont essentielles pour devenir être le meilleur.\nQu’est-ce qu’une habitude §\nUne habitude est une action répétée suffisamment de fois pour ne plus la remarquer, une habitude commune à tous dans la vie de tous les jours est simplement d’allumer la lumière quand on rentre dans une pièce.\nToutes les habitudes fonctionnent en quatre étapes : le déclencheur -&gt; l’envie -&gt; l’action -&gt; la récompense. Pour expliquer, je vais reprendre l’exemple de la lumière : Le déclencheur va être le fait de rentrer dans une pièce où l’on ne voit rien, cela va nous donner l’envie d’allumer la lumière, nous allons donc faire l’action d’allumer la lumière et donc la récompense est le fait de voir.\nAction pour cette partie §\nTon action pour cette partie va être de prendre une feuille ou simplement d’écrire sur ton ordinateur une liste de toutes habitudes liées à l’informatique, qu’elles soient bonnes ou mauvaises. Par exemple, je pourrais noter dans les mauvaises habitudes que je passe trop de temps à fouiller dans une documentation au lieu de travailler réellement du mon projet ou alors que je fais toujours en sorte de rendre mon code maintenable pour le futur.\nQuels sont les bonnes habitudes en informatique §\nGlobalement, les bonnes habitudes en informatique sont toutes les habitudes qui vont augmenter notre efficacité, celles qui vont nous permettre de produire plus de résultats avec autant ou moins de travail.\nPar exemple, quelques-unes de mes bonnes habitudes en informatique sont de toujours coder dans des sessions de travail en profondeur, c’est-à-dire en ayant absolument aucune distraction. La seconde est de toujours automatiser le plus possible mon travail, quand je vais voir un élément de code que je répète dans pleins de projets par exemple, je vais le mettre dans un snippet pour ne plus avoir à tout recopier, j’utilises les raccourcis clavier dès que je le peux, etc.\nUne bonne habitude aussi selon moi est de ne pas toujours chercher la simplicité, maintenant, il est très simple de taper son problème sur Google et de se retrouver avec la solution pour la copier-coller mais j’ai compris que cela détruisait la qualité de mon code alors j’ai arrêté de la faire. Maintenant, je n’utilises que les documentations officielles et cela a grandement amélioré ma productivité.\nAction pour cette partie §\nPrends une feuille, met une ligne au milieu et dans un seul des deux côtés tu vas noter toutes les bonnes habitudes que tu aimerais prendre en informatique comme par exemple, coder tous les jours, apprendre pendant quatres heures chaque semaine un nouveau sujet informatique, etc. Une fois la liste remplie, attends l’action de la prochaine partie pour remplir l’autre côté.\nQuelles sont les mauvaises habitudes en informatique §\nIl existe un tas de mauvaises habitudes en informatique, ces habitudes sont simplement des habitudes qui vont baisser la quantité de résultats que tu vas avoir en un certains temps de travail.\nLa pire habitude selon moi quand on code est de constamment aller sur son téléphone, cela va détruire ta concentration et tu ne pourras jamais fournir un travail de qualité. Ce fonctionnement est exactement le même sur ton ordinateur avec discord par exemple, quand tu codes ne vas jamais poser des question dans un forum ou un serveur discord, c’est le meilleur moyen pour te faire perdre 30 minutes de ton travail et d’annihilier ta concentration.\nUn petit dernier qui selon moi est drôle mais est commun de beaucoup est de toujours vouloir personnaliser dans les moindres détails son IDE, il est important d’avoir un environnement de travail qui nous plait, donc passer quelques heures dessus pour le mettre plus à notre goût ne pose aucun soucis mais passer 50 heures pour avoir le plus beau IDE qui au final ne vas plus nous satisfaire dans deux semaines est une véritable perte de temps.\nAction pour cette partie §\nReprends la feuille de tout à l’heure et cette fois-ci note toutes les mauvaises habitudes que tu as listées dans la première partie et que tu ne veux plus garder comme par exemple aller sur ton téléphone quand tu travaille, regarder trop de tutoriels sans réellement coder, ne pas assez coder, etc.\nComment acquérir rapidement de bonnes habitudes §\nPour avoir de nouvelles bonnes habitudes et retirer les mauvaises, il y a plusieurs règles à suivre si tu souhaites rendre le tout facile à acquérir.\nComme je l’ai dit, les habitudes fonctionnent en quatre étapes, pour chaque habitude que tu veux prendre, tu dois définir ces quatres étapes et en être conscient. Sur une feuille, tu vas noter une liste d’habitudes que tu veux prendre et sur une autre une liste de celles que tu veux retirer.\nTu vas créer un tableau où chaque ligne ligne représente un jour et chaque colonne représente une habitude. Une fois cela fait, accroche la au mur et tous les jours tu met un check si tu as fait cette habitude et une croix si tu ne l’as pas faite.\nPar exemple, si je veux prendre l’habitude de toujours travailler au moins trois heures par jour, je vais le mettre sur mon tableau. Maintenant, imaginons que j’ai réussi cette habitude uniquement lundi et jeudi et bien je vais cocher uniquement lundi et jeudi.\nNe culpabilise pas si tu ne réussi pas une habitude tous les jours, c’est un travail sur le long terme, on ne cherche pas à acquérir une habitude en deux jours pour la perdre en une semaine mais à l’acquérir en trois semaines pour la garder toute une vie. Chaque petite progression est un avancement et même chaque échec est une réussite puisqu’il montre que tu travailles et que tu es conscient de ce que tu dois faire.\nAction pour cette partie §\nReprends la feuille où sont notées toutes les bonnes et mauvaises habitudes, prends deux ou trois habitudes de chaque côté et mets dans ton tableau. Maintenant pendant un mois, ton but va être de tout faire pour mettre un check sur le plus de cases possibles.\nLe plus important reste de ne jamais culpabiliser tu rates un jour, tu dois simplement donner ton maximum mais si tu n’as pas réussi ce n’est pas grave."},"index":{"title":"HOME","links":["gestion_temps","habitudes"],"tags":[],"content":"Bienvenue sur le Blog officiel de Code avec Dave ! Ce blog suit le fonctionnement d’un second cerveau donc chaque note sera potentiellement liée à un concept. L’ensemble des notes et des liens peuvent être vus à droite sur Graph View.\nAu minimum une fois par semaine, un article sera posté sur ce blog qui sera par la suite refait sous forme de vidéo.\nArticles §\n\nComment gérer son temps en informatique\nComment développer de meilleures habitudes en informatique\n"}}